// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSBundle (SWIFT_EXTENSION(WowFramework))
+ (id _Nullable)loadResourceName:(NSString * _Null_unspecified)name;
@end

@class NSNotification;
@class NSObject;

@interface NSNotificationCenter (SWIFT_EXTENSION(WowFramework))
- (void)postNotificationOnMainThread:(NSNotification * _Nonnull)notification;
- (void)postNotificationNameOnMainThread:(NSString * _Nonnull)aName object:(id _Nullable)object;
- (void)postNotificationNameOnMainThread:(NSString * _Nonnull)aName object:(id _Nullable)object userInfo:(NSDictionary * _Nullable)userInfo;
@end

@class UIViewController;

@interface UIApplication (SWIFT_EXTENSION(WowFramework))
+ (UIViewController * _Nullable)currentViewController:(UIViewController * _Nullable)base;
@end


@interface UIDevice (SWIFT_EXTENSION(WowFramework))

/// 判断当前设备是不是iPhone设备
+ (BOOL)isPhone;

/// 判断当前设备是不是iPad设备
+ (BOOL)isPad;

/// 判断当前设备是不是iPad mini
+ (BOOL)isPadMini;

/// 判断当前设备是不是iPad设备，不包括iPad mini
+ (BOOL)isBigPad;

/// 判断当前设备的系统版本是否大于或者等于#version
- (BOOL)isGEWithVersion:(NSString * _Nonnull)version;
- (NSComparisonResult)compareWithVersion:(NSString * _Nonnull)version;
@end


@interface UIFont (SWIFT_EXTENSION(WowFramework))
+ (CGFloat)scale;

/// 判断设备字体进行放缩
///
/// \param fontSize 
+ (UIFont * _Nonnull)systemScaleFontSize:(CGFloat)fontSize;
+ (UIFont * _Nonnull)mediumScaleFontSize:(CGFloat)fontSize;
@end

@class UIColor;

@interface UIImage (SWIFT_EXTENSION(WowFramework))

/// 根据颜色和尺寸生成一张图片
///
/// \param color 颜色
///
/// \param size 尺寸
///
/// \returns  图片
+ (UIImage * _Nullable)imageWithColor:(UIColor * _Nonnull)color size:(CGSize)size;
@end


@interface UINib (SWIFT_EXTENSION(WowFramework))
+ (UINib * _Nonnull)nibName:(NSString * _Nonnull)name;
@end


@interface UIStoryboard (SWIFT_EXTENSION(WowFramework))

/// 根据stroyboard名称返回初始控制器
///
/// \param name 名称
///
/// \returns  初始控制器
+ (UIViewController * _Nonnull)initialViewController:(NSString * _Nonnull)name;

/// 根据stroyboard名称和标示符返回对应的控制器
///
/// \param name 名称
///
/// \param identifier 标示符
///
/// \returns  对应的控制器
+ (UIViewController * _Nonnull)initialViewController:(NSString * _Nonnull)name identifier:(NSString * _Nonnull)identifier;
@end


@interface UITableView (SWIFT_EXTENSION(WowFramework))

/// 剔除多余的cell
- (void)clearRestCell;
@end


@interface UITableViewCell (SWIFT_EXTENSION(WowFramework))

/// 重置cell的 margin 居中对齐
- (void)resetSeparators;
@end

@class UITapGestureRecognizer;

@interface UIView (SWIFT_EXTENSION(WowFramework))
- (void)borderColor:(CGFloat)borderWidth borderColor:(UIColor * _Nonnull)borderColor;
- (void)borderRadius:(CGFloat)radius;

/// 默认为为grayColor 默认透明度为0.5 默认扩散范围为2 默认阴影范围为size(1,1) - parameter color:
- (void)shadow:(UIColor * _Nonnull)color shadowOpacity:(float)shadowOpacity shadowRadius:(CGFloat)shadowRadius shadowOffset:(CGSize)shadowOffset;
- (void)addAction:(void (^ _Nonnull)(void))closure;
- (void)tapClick:(UITapGestureRecognizer * _Nonnull)tap;
@property (nonatomic) CGFloat x;
@property (nonatomic) CGFloat y;

/// bottom, right, width, height
@property (nonatomic, readonly) CGFloat bottom;
@property (nonatomic, readonly) CGFloat right;
@property (nonatomic) CGFloat width;
@property (nonatomic) CGFloat height;

/// origin, size
@property (nonatomic) CGPoint origin;
@property (nonatomic) CGSize size;

/// centerX, centerY
@property (nonatomic) CGFloat centerX;
@property (nonatomic) CGFloat centerY;
@end

@class UIBarButtonItem;

@interface UIViewController (SWIFT_EXTENSION(WowFramework))
- (void)makeCustomerNavigationItem:(NSString * _Null_unspecified)title left:(BOOL)left handler:(void (^ _Nullable)(void))handler;
- (void)makeCustomerImageNavigationItem:(NSString * _Null_unspecified)image left:(BOOL)left handler:(void (^ _Nonnull)(void))handler;
- (void)itemClick:(UIBarButtonItem * _Nonnull)item;

/// 获取自己之前的视图
///
/// \returns  
- (UIViewController * _Nullable)forwardController;
@end

#pragma clang diagnostic pop
